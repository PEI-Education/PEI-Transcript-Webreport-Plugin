[
  ~[x:GetDoThisForStudents]
  ~[x:SortSelection;Students:~[displayprefschool:report_card_sort]]
  ~[RepeatForEach:Students]
  {
      ~[tlist_sql;
      select
        s.id sid,
        s.schoolid schid,
        sch.name schName,
        sch.schooladdress schAddress,
        sch.schoolcity schCity,
        sch.schoolstate schState,
        sch.schoolzip schZIP,
        sch.schoolphone schPhone,
        schext.schoolurl schURL,
        scf.pscore_legal_last_name legalLastName,
        scf.pscore_legal_first_name legalFirstName,
        scf.pscore_legal_middle_name legalMiddleName,
        s.last_name lastName,
        s.first_name firstName,
        s.dob,
        s.student_number studentNumber,
        (select distinct
             case when gen.name = 'Essential Skills Achievement Pathway' then 1 else null end
           from SPEnrollments esap
           join GEN
             on GEN.id = esap.programid
           where
           gen.name = 'Essential Skills Achievement Pathway'
             and esap.studentid = s.id
             and (esap.exit_date >= SYSDATE OR esap.exitcode = 'GRAD')
         ) as esap,
         nvl(stuext.pei_adpcertificate,0) adp,
         nvl(stuext.pei_frenchcertificate,0) frenchcertificate,
         stuext.pei_graduationdate gradDate,
         case when substr(stuext.pei_hasgraduated, 0,1) = 'Y' then 1 else null end as gradY,
         case when substr(stuext.pei_hasgraduated, 0,1) <> 'Y' or stuext.pei_graduationdate is null then 1 else null end as gradN,
         s.home_room
      from students s
      join schools sch
           on s.schoolid = sch.school_number
      left join u_dyn_schools_1 schext
           on schext.schoolsdcid = sch.dcid
       left join studentcorefields scf 
            on scf.studentsdcid = s.dcid
       left join u_def_ext_students stuext
           on stuext.studentsdcid = s.dcid
       where s.id = ~(curstudid)
       ~[if.is.a.school]and s.schoolid = ~(curschoolid)[/if]
      ]
      "sid":"~(sid;json)",
      "school": {
           "number": "~(schid;json)",
           "name": "~(schName;json)",
           "address": "~(schAddress;json)",
           "city": "~(schCity;json)",
           "state": "~(schState;json)",
           "zip": "~(schZip;json)",
           "phone": "~(schPhone;json)",
           "url": "~(schURL;json)"
      },
      "legalLastName": "~(legalLastName;json)",
      "legalFirstName": "~(legalFirstName;json)",
      "legalMiddleName": "~(legalMiddleName;json)",
      "lastName": "~(lastName;json)",
      "firstName": "~(firstName;json)",
      "dob": "~(dob;d)",
      "studentNumber": "~(studentNumber)",
      "esap": ~(esap;l),
      "adp": ~(adp;json),
      "frenchcertificate": ~(frenchcertificate),
      "gradDate": "~(gradDate;d)",
      "gradY": ~(gradY;l),
      "gradN": ~(gradN;l),
      "hr": "~(home_room;json)",
      [/tlist_sql] 
      "rawCourses": [
         ~[tlist_sql;
           select
             to_char(t.lastday,'yyyy/mm') lastday,
             sg.course_number,
             sg.course_name,
             sg.grade,
             sg.earnedcrhrs,
             sg.potentialcrhrs,
             case sg.credit_type 
               when 'EN' then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_EN]'
               when 'FR' then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_FR]'
               when 'LA' then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_LA]'
               when 'MA' then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_MA]'
               when 'OP' then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_OP]'
               when 'SC' then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_SC]'
               when 'SH' then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_SS]'
               when 'SS' then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_SS]'
               when 'ESAP' then 'ESAP'
               else '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.type_ZZ]'
           end as subject
           from students s
           join storedgrades sg
             on sg.studentid = s.id
           join terms t
              on t.id = sg.termid
              and t.schoolid = s.schoolid
           join courses c
              on c.course_number = sg.course_number
           where
             s.id = ~(curstudid)
             and sg.storecode = 'F1'
             and nvl(c.sched_do_not_print,0) = 0
             and nvl(sg.excludefromtranscripts,0) = 0
           order by s.id ASC, sg.credit_type ASC, t.lastday ASC;
          ]
          {
               "creditDate": "~(lastday;json)",
               "number": "~(course_number;json)",
               "name": "~(course_name;json)",
               "mark": "~(grade;json)",
               "credit": ~(earnedcrhrs;l),
               "potentialCredit": ~(potentialcrhrs;l),
               "subject": "~(credit_type;json)"
               
          },
          [/tlist_sql]
          {}
      ],
      "courses": {
          "opc": [],
          "completed": [],
          "esap": [],
          "attempted":[]
      },
      "totalCredits": ~[tlist_sql; select to_char(sum(earnedcrhrs),'fm99D00') from storedgrades where studentid = ~(curstudid) and storecode = 'F1';nonemessage="--"]"~(totalCredits;json)"[/tlist_sql],
      "currentCourses": [
         ~[tlist_sql;
           select
             cc.termid,
             case 
               when cc.dateenrolled <= SYSDATE then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.in_progress]'
               when cc.dateenrolled > SYSDATE then '~[text:psx.htmlc.admin_pei_transcript.pei_transcript.next_semester]'
             end as status,
             cc.course_number,
             cc.dateenrolled,
             cc.dateleft,
             courses.course_name,
             CASE
                 WHEN sg.storecode = '~(gpv.ccmarks)' THEN sg.grade
                 ELSE '-'   
             END AS currentMark
           from students s
           join cc 
               on cc.studentid=s.id
           join courses 
               on courses.course_number=cc.course_number
           left join storedgrades sg 
               on sg.studentid=s.id and sg.sectionid=cc.sectionid
           where
             s.id = ~(curstudid)
             and substr(cc.termid,0,2) = '~(curyearid)'
             and nvl(courses.sched_do_not_print,0) = 0
             and nvl(sg.excludefromtranscripts,0) = 0
             and cc.dateleft >= SYSDATE
           order by cc.termid
         ]
         {
             "termid":~(2;l),
             "status": "~(status;json)",
             "number":"~(3;json)",
             "dateEnrolled":"~(4;d)",
             "dateLeft":"~(5;d)",
             "name":"~(6;json)",
             "mark":"~(7;json)"
         },
         [/tlist_sql]
         {}
       ]
  }
  [between:Students],
  [/RepeatForEach:Students] 
]